var VuePicker = (function (exports, vue) {
  'use strict';

  function onOuterClick (el, cb) {
    var handler = function (e) {
      if (!el.contains(e.target)) { cb(); }
    };

    document.addEventListener('click', handler, false);
    return function () { return document.removeEventListener('click', handler, false); }
  }

  function useDropdown () {
    var dropdown = new Dropdown();

    vue.onUnmounted(function () { return dropdown.destroy(); });

    return dropdown
  }

  var Dropdown = function Dropdown () {
    this.isShown = vue.ref(false);
    this.outClickTarget = vue.ref();
    this._unlistenOuterClick = function () { };
    this._onShowSubs = [];
    this._onHideSubs = [];
    this._unsubs = [];
  };

  Dropdown.prototype.destroy = function destroy () {
    console.log('DESTROYED');
    this._unlistenOuterClick();
    this._unsubs.forEach(function (unsub) { return unsub(); });
  };

  Dropdown.prototype.toggle = function toggle () {
    if (this.isShown.value) {
      this.hide();
    } else {
      this.show();
    }
  };

  Dropdown.prototype.show = function show () {
    console.log('SHOW');
    this._listenOuterClick();
    this.isShown.value = true;
    this._onShowSubs.forEach(function (cb) { return cb(); });
  };

  Dropdown.prototype.hide = function hide (isOuterClick) {
      if ( isOuterClick === void 0 ) isOuterClick = false;

    console.log('HIDE');
    this._unlistenOuterClick();
    this.isShown.value = false;
    this._onHideSubs.forEach(function (cb) { return cb(isOuterClick); });
  };

  Dropdown.prototype.onShow = function onShow (cb) {
      var this$1 = this;

    this._onShowSubs.push(cb);
    this._unsubs.push(function () {
      this$1._onShowSubs = this$1._onShowSubs.filter(function (el) { return el !== cb; });
    });
  };

  Dropdown.prototype.onHide = function onHide (cb) {
      var this$1 = this;

    this._onHideSubs.push(cb);
    this._unsubs.push(function () {
      this$1._onHideSubs = this$1._onHideSubs.filter(function (el) { return el !== cb; });
    });
  };

  Dropdown.prototype._listenOuterClick = function _listenOuterClick () {
      var this$1 = this;

    var listener = function () { return this$1.hide(true); };
    this._unlistenOuterClick = onOuterClick(this.outClickTarget.value, listener);
  };

  /**
   * @typedef {object} KeyboardActions
   * @property {Function} actions.toggleDropdown
   * @property {Function} actions.hideDropdown
   * @property {Function} actions.selectFirst
   * @property {Function} actions.selectLast
   * @property {Function} actions.selectPrev
   * @property {Function} actions.selectNext
   */

  function useKeyboardListener () {
    var kbActions = {};

    /** @param {KeyboardActions} actions */
    var registerActions = function (actions) { Object.assign(kbActions, actions); };

    var onKeyDown = onKeyDownHandler.bind(null, kbActions);
    var listen = function () { document.addEventListener('keydown', onKeyDown); };
    var unlisten = function () { document.removeEventListener('keydown', onKeyDown); };

    vue.onBeforeUnmount(unlisten);

    return { listen: listen, unlisten: unlisten, registerActions: registerActions }
  }

  /**
   * @param {KeyboardActions} actions
   * @param {KeyboardEvent} event
   */
  function onKeyDownHandler (actions, event) {
    switch (event.key) {
      case 'Esc':
      case 'Escape':
      case 'Tab':
      case 'Enter':
        event.preventDefault();
        event.stopPropagation();
        actions.hideDropdown();
        break

      case 'Up':
      case 'ArrowUp':
        event.preventDefault();
        event.stopPropagation();
        if (event.altKey) {
          actions.toggleDropdown();
        } else {
          actions.selectPrev();
        }
        break

      case 'Down':
      case 'ArrowDown':
        event.preventDefault();
        event.stopPropagation();
        if (event.altKey) {
          actions.toggleDropdown();
        } else {
          actions.selectNext();
        }
        break

      case 'Home':
        event.preventDefault();
        event.stopPropagation();
        actions.selectFirst();
        break

      case 'End':
        event.preventDefault();
        event.stopPropagation();
        actions.selectLast();
        break
    }
  }

  var script$1 = {
    name: 'VuePicker',

    emits: ['open', 'close', 'update:modelValue'],

    setup: function setup () {
      var ref = useKeyboardListener();
      var listen = ref.listen;
      var unlisten = ref.unlisten;
      var registerActions = ref.registerActions;

      var dropdown = useDropdown();
      dropdown.onShow(listen);
      dropdown.onHide(unlisten);

      return {
        dropdown: dropdown,
        registerKeyboardActions: registerActions,
      }
    },

    props: {
      modelValue: { type: String, default: '' },
      placeholder: { type: String, default: '' },
      isDisabled: { type: Boolean, default: false },
      isAutofocus: { type: Boolean, default: false },
    },

    provide: function provide () {
      return { 'pickerContext': this }
    },

    data: function data () {
      return {
        curOptIdx: -1,
        opts: [],
      }
    },

    computed: {
      curOpt: function curOpt () { return this.opts[this.curOptIdx] },
      curOptVal: function curOptVal () { return (this.curOpt || {}).value },
      ph: function ph () { return !this.modelValue && this.placeholder },
      openerTxt: function openerTxt () { return this.ph || (this.curOpt || {}).optTxt },
      openerHtml: function openerHtml () { return this.ph || (this.curOpt || {}).optHtml },
    },

    watch: {
      modelValue: function modelValue (nV, oV) { console.log(nV, oV) ||  (nV !== oV) && this.selectByValue(this.modelValue); },
    },

    mounted: function mounted () {
      var this$1 = this;

      this.registerKeyboardActions({
        toggleDropdown: function () { return this$1.dropdown.toggle(); },
        hideDropdown: function () { return this$1.dropdown.hide(); },
        selectFirst: function () { return this$1.selectFirst(); },
        selectLast: function () { return this$1.selectLast(); },
        selectPrev: function () { return this$1.selectPrev(); },
        selectNext: function () { return this$1.selectNext(); },
      });

      this.dropdown.onShow(function () {
        if (this$1.curOpt) { this$1.$nextTick(function () { return this$1.curOpt.$el.focus(); }); }
        else { this$1.$refs.opener.blur(); }
        this$1.$emit('open');
      });
      this.dropdown.onHide(function (isOuterClick) {
        if (!isOuterClick) { this$1.$refs.opener.focus(); }
        this$1.emitCurOptVal();
        this$1.$emit('close', isOuterClick);
      });

      if (this.isAutofocus) { this.$refs.opener.focus(); }
      if (this.modelValue) { this.selectByValue(this.modelValue); }
    },

    methods: {
      selectByIdx: function selectByIdx (idx) {
        if (this.curOpt) { this.curOpt.isSelected = false; }

        this.curOptIdx = idx;

        if (this.curOpt) {
          this.curOpt.$el.focus();
          this.curOpt.isSelected = true;
        }

        if (this.dropdown.isShown.value) { return }
        this.emitCurOptVal(this.curOpt ? this.curOpt.value : this.modelValue);
      },

      selectByValue: function selectByValue (value) {
        if ( value === void 0 ) value = '';

        var idx = this.opts.findIndex(function (el) { return el.value === value; });
        if (this.curOptIdx === idx) { return }

        var opt = this.opts[idx];
        if (!opt) { return this.selectByIdx(-1) }
        this.selectByIdx(idx);
      },

      selectNext: function selectNext (offset, startIdx) {
        if ( offset === void 0 ) offset = 1;
        if ( startIdx === void 0 ) startIdx = this.curOptIdx;

        var nextIdx = startIdx + offset;
        var nextOpt = this.opts[nextIdx];
        if (!nextOpt) { return }
        if (nextOpt.isDisabled) { return this.selectNext(offset, nextIdx) }
        this.selectByIdx(nextIdx);
      },

      selectPrev: function selectPrev () {
        if (this.curOptIdx < 0) { return this.selectLast() }
        this.selectNext(-1);
      },

      selectFirst: function selectFirst () {
        this.selectNext(1, -1);
      },

      selectLast: function selectLast () {
        this.selectNext(-1, this.opts.length);
      },

      emitCurOptVal: function emitCurOptVal (val) {
        if ( val === void 0 ) val = this.curOptVal;

        if (typeof val !== 'string') { return }
        this.$emit('update:modelValue', val);
      },

      regOpt: function regOpt (opt) {
        this.opts.push(opt);
      },
    },
  };

  var _hoisted_1 = /*#__PURE__*/vue.createVNode("i", { class: "vue-picker__opener-ico" }, null, -1 /* HOISTED */);
  var _hoisted_2 = { class: "vue-picker__dropdown" };

  function render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock("div", {
      class: ["vue-picker", {
        'vue-picker_open': $setup.dropdown.isShown.value,
        'vue-picker_disabled': $props.isDisabled,
        'vue-picker_has-val': $options.curOptVal,
      }],
      ref: $setup.dropdown.outClickTarget
    }, [
      vue.createVNode("button", {
        class: "vue-picker__opener",
        type: "button",
        ref: "opener",
        onClick: _cache[1] || (_cache[1] = function ($event) { return ($setup.dropdown.toggle()); }),
        onKeydown: [
          _cache[2] || (_cache[2] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.dropdown.toggle()); }, ["alt","stop","prevent"]), ["up"])),
          _cache[3] || (_cache[3] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectPrev()); }, ["exact","stop","prevent"]), ["up"])),
          _cache[4] || (_cache[4] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.dropdown.toggle()); }, ["alt","stop","prevent"]), ["down"])),
          _cache[5] || (_cache[5] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectNext()); }, ["exact","stop","prevent"]), ["down"])),
          _cache[6] || (_cache[6] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectFirst()); }, ["stop","prevent"]), ["home"])),
          _cache[7] || (_cache[7] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectLast()); }, ["stop","prevent"]), ["end"]))
        ],
        disabled: $props.isDisabled
      }, [
        vue.renderSlot(_ctx.$slots, "opener", {
          opener: { value: $props.modelValue, text: $options.openerTxt, opt: $options.curOpt }
        }, function () { return [
          vue.createVNode("span", {
            class: "vue-picker__opener-txt",
            innerHTML: $options.openerHtml
          }, null, 8 /* PROPS */, ["innerHTML"])
        ]; }),
        vue.renderSlot(_ctx.$slots, "openerIco", {}, function () { return [
          _hoisted_1
        ]; })
      ], 40 /* PROPS, HYDRATE_EVENTS */, ["disabled"]),
      vue.withDirectives(vue.createVNode("div", _hoisted_2, [
        vue.renderSlot(_ctx.$slots, "dropdownInner", {}, function () { return [
          vue.renderSlot(_ctx.$slots, "default")
        ]; })
      ], 512 /* NEED_PATCH */), [
        [vue.vShow, $setup.dropdown.isShown.value]
      ])
    ], 2 /* CLASS */))
  }

  script$1.render = render$1;
  script$1.__file = "src/components/VuePicker.vue";

  var script = {
    name: 'VuePickerOption',

    props: {
      value: { type: String, default: '' },
      text: { type: String, default: '' },
      isDisabled: { type: Boolean, default: false },
    },

    data: function data () {
      return { isSelected: false }
    },

    inject: { picker: 'pickerContext' },

    computed: {
      optHtml: function optHtml () { return this.text || this.$el.innerHTML || this.value },
      optTxt: function optTxt () { return this.text || this.$el.innerText || this.value },
    },

    created: function created () {
      this.picker.regOpt(this);
    },

    methods: {
      selectMyValue: function selectMyValue () {
        this.picker.selectByValue(this.value);
        this.picker.dropdown.hide();
      },
    },
  };

  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock("button", {
      class: ["vue-picker-option", { 'vue-picker-option_cur': $data.isSelected }],
      type: "button",
      onClick: _cache[1] || (_cache[1] = function ($event) { return ($options.selectMyValue()); }),
      disabled: $props.isDisabled
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 10 /* CLASS, PROPS */, ["disabled"]))
  }

  script.render = render;
  script.__file = "src/components/VuePickerOption.vue";

  function install (Vue) {
    if (install.installed) { return }
    install.installed = true;
    Vue.component('VuePicker', script$1);
    Vue.component('VuePickerOption', script);
  }

  if (typeof window !== 'undefined') {
    window.VuePicker = install;
  } else if (typeof global !== 'undefined') {
    window.VuePicker = install;
  }

  exports.VuePicker = script$1;
  exports.VuePickerOption = script;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}, Vue));

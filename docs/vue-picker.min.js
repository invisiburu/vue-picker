var VuePicker = (function (exports, vue) {
  'use strict';

  function useDropdown () {
    var isShown = vue.ref(false);
    var clickOutRef = vue.ref();

    var _unlistenOuterClick = function () { };
    var _onShowSubs = [];
    var _onHideSubs = [];
    var _unsubs = [];

    var toggle = function () {
      isShown.value ? hide() : show();
    };

    var show = function () {
      console.log('SHOW');
      isShown.value = true;
      _unlistenOuterClick = _onClickOut(clickOutRef.value, function () { return hide(true); });
      _onShowSubs.forEach(function (cb) { return cb(); });
    };

    var hide = function (isOuterClick) {
      if ( isOuterClick === void 0 ) isOuterClick = false;

      console.log('HIDE');
      isShown.value = false;
      _unlistenOuterClick();
      _onHideSubs.forEach(function (cb) { return cb(isOuterClick); });
    };

    var onShow = function (cb) {
      _onShowSubs.push(cb);
      _unsubs.push(function () {
        _onShowSubs = _onShowSubs.filter(function (el) { return el !== cb; });
      });
    };

    var onHide = function (cb) {
      _onHideSubs.push(cb);
      _unsubs.push(function () {
        _onHideSubs = _onHideSubs.filter(function (el) { return el !== cb; });
      });
    };

    vue.onUnmounted(function () {
      _unlistenOuterClick();
      _unsubs.forEach(function (unsub) { return unsub(); });
    });

    return {
      isShown: isShown,
      clickOutRef: clickOutRef,
      toggle: toggle,
      show: show,
      hide: hide,
      onShow: onShow,
      onHide: onHide,
    }
  }

  function _onClickOut (el, cb) {
    var handler = function (e) {
      if (!el.contains(e.target)) { cb(); }
    };

    document.addEventListener('click', handler, false);
    return function () { document.removeEventListener('click', handler, false); }
  }

  /**
   * @typedef {object} KeyboardActions
   * @property {Function} actions.toggleDropdown
   * @property {Function} actions.hideDropdown
   * @property {Function} actions.selectFirst
   * @property {Function} actions.selectLast
   * @property {Function} actions.selectPrev
   * @property {Function} actions.selectNext
   */

  function useKeyboardListener () {
    var kbActions = {};

    /** @param {KeyboardActions} actions */
    var registerActions = function (actions) { Object.assign(kbActions, actions); };

    var onKeyDown = onKeyDownHandler.bind(null, kbActions);
    var listen = function () { document.addEventListener('keydown', onKeyDown); };
    var unlisten = function () { document.removeEventListener('keydown', onKeyDown); };

    vue.onBeforeUnmount(unlisten);

    return { listen: listen, unlisten: unlisten, registerActions: registerActions }
  }

  /**
   * @param {KeyboardActions} actions
   * @param {KeyboardEvent} event
   */
  function onKeyDownHandler (actions, event) {
    switch (event.key) {
      case 'Esc':
      case 'Escape':
      case 'Tab':
      case 'Enter':
        event.preventDefault();
        event.stopPropagation();
        actions.hideDropdown();
        break

      case 'Up':
      case 'ArrowUp':
        event.preventDefault();
        event.stopPropagation();
        if (event.altKey) {
          actions.toggleDropdown();
        } else {
          actions.selectPrev();
        }
        break

      case 'Down':
      case 'ArrowDown':
        event.preventDefault();
        event.stopPropagation();
        if (event.altKey) {
          actions.toggleDropdown();
        } else {
          actions.selectNext();
        }
        break

      case 'Home':
        event.preventDefault();
        event.stopPropagation();
        actions.selectFirst();
        break

      case 'End':
        event.preventDefault();
        event.stopPropagation();
        actions.selectLast();
        break
    }
  }

  var script$1 = {
    name: 'VuePicker',

    emits: ['open', 'close', 'update:modelValue'],

    props: {
      modelValue: { type: String, default: '' },
      placeholder: { type: String, default: '' },
      isDisabled: { type: Boolean, default: false },
      isAutofocus: { type: Boolean, default: false },
    },

    setup: function setup (props, ref$1) {
      var emit = ref$1.emit;

      var ref$2 = vue.toRefs(props);
      var modelValue = ref$2.modelValue;
      var placeholder = ref$2.placeholder;
      var isAutofocus = ref$2.isAutofocus;

      var ref$3 = useKeyboardListener();
      var listen = ref$3.listen;
      var unlisten = ref$3.unlisten;
      var registerActions = ref$3.registerActions;

      var dropdown = useDropdown();

      var openerRef = vue.ref();
      var focusOpener = function () { openerRef.value.focus(); };
      var blurOpener = function () { openerRef.value.blur(); };

      vue.onMounted(function () {
        registerActions({
          toggleDropdown: function () { dropdown.toggle(); },
          hideDropdown: function () { dropdown.hide(); },
          selectFirst: function () { selectFirst(); },
          selectLast: function () { selectLast(); },
          selectPrev: function () { selectPrev(); },
          selectNext: function () { selectNext(); },
        });

        dropdown.onShow(function () {
          listen();
          if (curOpt.value) { vue.nextTick(function () { return curOpt.value.focus(); }); }
          else { blurOpener(); }
          emit('open');
        });
        dropdown.onHide(function (isOuterClick) {
          unlisten();
          if (!isOuterClick) { focusOpener(); }
          emitModelValue();
          emit('close', isOuterClick);
        });

        if (isAutofocus.value) { focusOpener(); }
        if (modelValue.value) { selectByValue(modelValue.value); }
      });

      // opts
      /** @type {VuePickerOption[]} */
      var opts = [];
      /** @type {VuePickerOption} */
      var curOpt = vue.ref(null);
      var curOptVal = vue.ref(null);
      var curOptIdx = -1;

      var openerTxt = vue.computed(function () {
        if (!modelValue.value && placeholder.value) { return placeholder.value }
        return curOpt.value && curOpt.value.optTxt
      });
      var openerHtml = vue.computed(function () {
        if (!modelValue.value && placeholder.value) { return placeholder.value }
        return curOpt.value && curOpt.value.optHtml
      });

      var selectByIdx = function (idx) {
        if (curOpt.value) { curOpt.value.setIsSelected(false); }

        curOptIdx = idx;
        curOpt.value = opts[idx];
        curOptVal.value = curOpt && curOpt.value && curOpt.value.value;

        if (curOpt.value) {
          curOpt.value.focus();
          curOpt.value.setIsSelected(true);
        }

        if (dropdown.isShown.value) { return }
        emitModelValue(curOptVal.value ? curOptVal.value.value : modelValue.value);
      };

      var selectByValue = function (value) {
        if ( value === void 0 ) value = '';

        var idx = opts.findIndex(function (el) { return el.value === value; });
        if (curOptIdx === idx) { return }

        var opt = opts[idx];
        if (!opt) { return selectByIdx(-1) }
        selectByIdx(idx);
      };

      var selectNext = function (offset, startIdx) {
        if ( offset === void 0 ) offset = 1;
        if ( startIdx === void 0 ) startIdx = curOptIdx;

        var nextIdx = startIdx + offset;
        var nextOpt = opts[nextIdx];
        console.log('NEXT', nextOpt);
        if (!nextOpt) { return }
        if (nextOpt.isDisabled) { return selectNext(offset, nextIdx) }
        selectByIdx(nextIdx);
      };

      var selectPrev = function () {
        console.log('PREV');
        if (curOptIdx < 0) { return selectLast() }
        selectNext(-1);
      };

      var selectFirst = function () {
        console.log('FIRST');
        selectNext(1, -1);
      };

      var selectLast = function () {
        console.log('LAST');
        selectNext(-1, opts.length);
      };

      var emitModelValue = function (val) {
        if ( val === void 0 ) val = curOptVal.value;

        if (typeof val !== 'string') { return }
        emit('update:modelValue', val);
      };

      var regOpt = function (opt) {
        opts.push(opt);
      };

      vue.provide('pickerContext', {
        selectByValue: function (value) {
        if ( value === void 0 ) value = '';
   selectByValue(value); },
        regOpt: function (opt) { regOpt(opt); },
        hideDropdown: function () { dropdown.hide(); },
      });

      vue.watch(modelValue, function (nV, oV) {
        if (nV !== oV) {
          selectByValue(nV);
        }
      });

      // /opts

      return {
        dropdown: dropdown,
        openerRef: openerRef,
        curOpt: curOpt,
        curOptVal: curOptVal,
        openerTxt: openerTxt,
        openerHtml: openerHtml,
        selectNext: selectNext,
        selectPrev: selectPrev,
        selectFirst: selectFirst,
        selectLast: selectLast,
      }
    },
  };

  var _hoisted_1 = /*#__PURE__*/vue.createVNode("i", { class: "vue-picker__opener-ico" }, null, -1 /* HOISTED */);
  var _hoisted_2 = { class: "vue-picker__dropdown" };

  function render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock("div", {
      class: ["vue-picker", {
        'vue-picker_open': $setup.dropdown.isShown.value,
        'vue-picker_disabled': $props.isDisabled,
        'vue-picker_has-val': $setup.curOptVal,
      }],
      ref: $setup.dropdown.clickOutRef
    }, [
      vue.createVNode("button", {
        class: "vue-picker__opener",
        type: "button",
        onClick: _cache[1] || (_cache[1] = function ($event) { return ($setup.dropdown.toggle()); }),
        onKeydown: [
          _cache[2] || (_cache[2] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.dropdown.toggle()); }, ["alt","stop","prevent"]), ["up"])),
          _cache[3] || (_cache[3] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.selectPrev()); }, ["exact","stop","prevent"]), ["up"])),
          _cache[4] || (_cache[4] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.dropdown.toggle()); }, ["alt","stop","prevent"]), ["down"])),
          _cache[5] || (_cache[5] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.selectNext()); }, ["exact","stop","prevent"]), ["down"])),
          _cache[6] || (_cache[6] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.selectFirst()); }, ["stop","prevent"]), ["home"])),
          _cache[7] || (_cache[7] = vue.withKeys(vue.withModifiers(function ($event) { return ($setup.selectLast()); }, ["stop","prevent"]), ["end"]))
        ],
        disabled: $props.isDisabled,
        ref: "openerRef"
      }, [
        vue.renderSlot(_ctx.$slots, "opener", {
          opener: { value: $setup.curOptVal, text: $setup.openerTxt, opt: $setup.curOpt }
        }, function () { return [
          vue.createVNode("span", {
            class: "vue-picker__opener-txt",
            innerHTML: $setup.openerHtml
          }, null, 8 /* PROPS */, ["innerHTML"])
        ]; }),
        vue.renderSlot(_ctx.$slots, "openerIco", {}, function () { return [
          _hoisted_1
        ]; })
      ], 40 /* PROPS, HYDRATE_EVENTS */, ["disabled"]),
      vue.withDirectives(vue.createVNode("div", _hoisted_2, [
        vue.renderSlot(_ctx.$slots, "dropdownInner", {}, function () { return [
          vue.renderSlot(_ctx.$slots, "default")
        ]; })
      ], 512 /* NEED_PATCH */), [
        [vue.vShow, $setup.dropdown.isShown.value]
      ])
    ], 2 /* CLASS */))
  }

  script$1.render = render$1;
  script$1.__file = "src/components/VuePicker.vue";

  // TODO: test if dynamically add options works
  // TODO: refactor provide-inject https://v3.vuejs.org/guide/composition-api-provide-inject.html

  var script = {
    name: 'VuePickerOption',

    props: {
      value: { type: String, default: '' },
      text: { type: String, default: '' },
      isDisabled: { type: Boolean, default: false },
    },

    setup: function setup (props) {
      var ref$1 = vue.toRefs(props);
      var value = ref$1.value;
      var text = ref$1.text;
      var btnRef = vue.ref();
      var isSelected = vue.ref(false);

      var picker = vue.inject('pickerContext');
      picker.regOpt({
        value: value.value,
        isDisabled: props.isDisabled,
        optHtml: vue.computed(function () {
          var btnHtml = btnRef.value && btnRef.value.innerHTML;
          return text.value || btnHtml || value.value
        }),
        optTxt: vue.computed(function () {
          var btnText = btnRef.value && btnRef.value.innerText;
          return text.value || btnText || value.value
        }
        ),
        setIsSelected: function (val) { isSelected.value = val; },
        focus: function () { btnRef.value && btnRef.value.focus(); },
      });

      var selectMyValue = function () {
        picker.selectByValue(value.value);
        picker.hideDropdown();
      };

      return {
        btnRef: btnRef,
        isSelected: isSelected,
        selectMyValue: selectMyValue,
      }
    },
  };

  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock("button", {
      class: ["vue-picker-option", { 'vue-picker-option_cur': $setup.isSelected }],
      type: "button",
      onClick: _cache[1] || (_cache[1] = function ($event) { return ($setup.selectMyValue($event)); }),
      disabled: $props.isDisabled,
      ref: "btnRef"
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 10 /* CLASS, PROPS */, ["disabled"]))
  }

  script.render = render;
  script.__file = "src/components/VuePickerOption.vue";

  function install (Vue) {
    if (install.installed) { return }
    install.installed = true;
    Vue.component('VuePicker', script$1);
    Vue.component('VuePickerOption', script);
  }

  if (typeof window !== 'undefined') {
    window.VuePicker = install;
  } else if (typeof global !== 'undefined') {
    global.VuePicker = install;
  }

  exports.VuePicker = script$1;
  exports.VuePickerOption = script;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}, Vue));

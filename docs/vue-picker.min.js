var VuePicker = (function (exports, vue) {
  'use strict';

  function onOuterClick (el, cb) {
    var handler = function (e) {
      if (!el.contains(e.target)) { cb(); }
    };

    document.addEventListener('click', handler, false);
    return function () { return document.removeEventListener('click', handler, false); }
  }

  var dropdownControls = {
    data: function data () {
      return {
        isDropdownShown: false,
        unlistenOuterClick: function () { },
        onDdShowSubs: [],
        onDdHideSubs: [],
        unsubs: [],
      }
    },

    beforeDestroy: function beforeDestroy () {
      this.unlistenOuterClick();
      this.unsubs.forEach(function (unsub) { return unsub(); });
    },

    methods: {
      toggleDropdown: function toggleDropdown () {
        if (this.isDropdownShown) {
          this.hideDropdown();
        } else {
          this.showDropdown();
        }
      },

      showDropdown: function showDropdown () {
        this.listenOuterClick();
        this.isDropdownShown = true;
        this.onDdShowSubs.forEach(function (cb) { return cb(); });
      },

      hideDropdown: function hideDropdown (isOuterClick) {
        if ( isOuterClick === void 0 ) isOuterClick = false;

        this.unlistenOuterClick();
        this.isDropdownShown = false;
        this.onDdHideSubs.forEach(function (cb) { return cb(isOuterClick); });
      },

      hideDropdownOuter: function hideDropdownOuter() {
        this.hideDropdown(true);
      },

      listenOuterClick: function listenOuterClick () {
        this.unlistenOuterClick = onOuterClick(this.$el, this.hideDropdownOuter);
      },

      onDropdownShow: function onDropdownShow (cb) {
        var this$1 = this;

        this.onDdShowSubs.push(cb);
        this.unsubs.push(function () {
          this$1.onDdShowSubs = this$1.onDdShowSubs.filter(function (el) { return el !== cb; });
        });
      },

      onDropdownHide: function onDropdownHide (cb) {
        var this$1 = this;

        this.onDdHideSubs.push(cb);
        this.unsubs.push(function () {
          this$1.onDdHideSubs = this$1.onDdHideSubs.filter(function (el) { return el !== cb; });
        });
      },
    },
  };

  var keyControls = {
    data: function data () {
      return {
        ddKeySubs: [],
      }
    },

    created: function created () {
      this.onDropdownShow(this.listenKeys);
      this.onDropdownHide(this.unlistenKeys);
    },

    beforeDestroy: function beforeDestroy () {
      this.unlistenKeys();
    },

    methods: {
      listenKeys: function listenKeys () {
        document.addEventListener('keydown', this.listenKeyDown);
      },

      unlistenKeys: function unlistenKeys () {
        document.removeEventListener('keydown', this.listenKeyDown);
      },

      listenKeyDown: function listenKeyDown (event) {
        switch (event.key) {
          case 'Esc':
          case 'Escape':
          case 'Tab':
          case 'Enter':
            event.preventDefault();
            event.stopPropagation();
            return this.hideDropdown()

          case 'Up':
          case 'ArrowUp':
            event.preventDefault();
            event.stopPropagation();
            if (event.altKey)
              { return this.toggleDropdown() }
            return this.selectPrev()

          case 'Down':
          case 'ArrowDown':
            event.preventDefault();
            event.stopPropagation();
            if (event.altKey)
              { return this.toggleDropdown() }
            return this.selectNext()

          case 'Home':
            event.preventDefault();
            event.stopPropagation();
            return this.selectFirst()

          case 'End':
            event.preventDefault();
            event.stopPropagation();
            return this.selectLast()
        }
      },
    },
  };

  var upperFirst = function (str) { return str.replace(/^./, function (v) { return v.toUpperCase(); }); };

  function attrs () {
    var attrs = [], len = arguments.length;
    while ( len-- ) attrs[ len ] = arguments[ len ];

    var props = {};
    var computed = {};

    attrs.forEach(function (name) {
      props[name] = { type: [String, Boolean], default: false };
      computed[("is" + (upperFirst(name)))] = function () {
        var val = this[name];
        var re = new RegExp(("^(true|" + name + ")?$"), 'i');
        return typeof val === 'string' ? re.test(val.trim()) : val
      };
    });

    return {
      props: props,
      computed: computed,
    }
  }

  var attrsMixin$1 = attrs('disabled', 'autofocus');

  var script$1 = {
    name: 'VuePicker',

    mixins: [attrsMixin$1, dropdownControls, keyControls],

    props: {
      value: { type: String, default: '' },
      placeholder: { type: String, default: '' },
    },

    provide: function provide () {
      return { 'pickerContext': this }
    },

    data: function data () {
      return {
        curOptIdx: -1,
        opts: [],
      }
    },

    computed: {
      curOpt: function curOpt () { return this.opts[this.curOptIdx] },
      curOptVal: function curOptVal () { return (this.curOpt || {}).value },
      ph: function ph () { return !this.value && this.placeholder },
      openerTxt: function openerTxt () { return this.ph || (this.curOpt || {}).optTxt },
      openerHtml: function openerHtml () { return this.ph || (this.curOpt || {}).optHtml },
    },

    watch: {
      value: function value (nV, oV) { (nV !== oV) && this.selectByValue(this.value); },
    },

    mounted: function mounted () {
      var this$1 = this;

      this.onDropdownShow(function () {
        if (this$1.curOpt) { this$1.$nextTick(function () { return this$1.curOpt.$el.focus(); }); }
        else { this$1.$refs.opener.blur(); }
        this$1.$emit('open');
      });

      this.onDropdownHide(function (isOuterClick) {
        if (!isOuterClick) { this$1.$refs.opener.focus(); }
        this$1.emitCurOptVal();
        this$1.$emit('close', isOuterClick);
      });

      if (this.isAutofocus) { this.$refs.opener.focus(); }
      if (this.value) { this.selectByValue(this.value); }
    },

    methods: {
      selectByIdx: function selectByIdx (idx) {
        if (this.curOpt) { this.curOpt.isSelected = false; }

        this.curOptIdx = idx;

        if (this.curOpt) {
          this.curOpt.$el.focus();
          this.curOpt.isSelected = true;
        }

        if (this.isDropdownShown) { return }
        this.emitCurOptVal(this.curOpt ? this.curOpt.value : this.value);
      },

      selectByValue: function selectByValue (value) {
        if ( value === void 0 ) value = '';

        var idx = this.opts.findIndex(function (el) { return el.value === value; });
        if (this.curOptIdx === idx) { return }

        var opt = this.opts[idx];
        if (!opt) { return this.selectByIdx(-1) }
        this.selectByIdx(idx);
      },

      selectNext: function selectNext (offset, startIdx) {
        if ( offset === void 0 ) offset = 1;
        if ( startIdx === void 0 ) startIdx = this.curOptIdx;

        var nextIdx = startIdx + offset;
        var nextOpt = this.opts[nextIdx];
        if (!nextOpt) { return }
        if (nextOpt.isDisabled) { return this.selectNext(offset, nextIdx) }
        this.selectByIdx(nextIdx);
      },

      selectPrev: function selectPrev () {
        if (this.curOptIdx < 0) { return this.selectLast() }
        this.selectNext(-1);
      },

      selectFirst: function selectFirst () {
        this.selectNext(1, -1);
      },

      selectLast: function selectLast () {
        this.selectNext(-1, this.opts.length);
      },

      emitCurOptVal: function emitCurOptVal (val) {
        if ( val === void 0 ) val = this.curOptVal;

        if (typeof val !== 'string') { return }
        this.$emit('input', val);
      },

      regOpt: function regOpt (opt) {
        this.opts.push(opt);
      },
    },
  };

  var _hoisted_1 = /*#__PURE__*/vue.createVNode("i", { class: "vue-picker__opener-ico" }, null, -1 /* HOISTED */);
  var _hoisted_2 = { class: "vue-picker__dropdown" };

  function render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock("div", {
      class: ["vue-picker", {
        'vue-picker--open': _ctx.isDropdownShown,
        'vue-picker--disabled': _ctx.isDisabled,
        'vue-picker--has-val': $options.curOptVal,
      }]
    }, [
      vue.createVNode("button", {
        class: "vue-picker__opener",
        type: "button",
        ref: "opener",
        onClick: _cache[1] || (_cache[1] = function ($event) { return (_ctx.toggleDropdown()); }),
        onKeydown: [
          _cache[2] || (_cache[2] = vue.withKeys(vue.withModifiers(function ($event) { return (_ctx.toggleDropdown()); }, ["alt","stop","prevent"]), ["up"])),
          _cache[3] || (_cache[3] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectPrev()); }, ["exact","stop","prevent"]), ["up"])),
          _cache[4] || (_cache[4] = vue.withKeys(vue.withModifiers(function ($event) { return (_ctx.toggleDropdown()); }, ["alt","stop","prevent"]), ["down"])),
          _cache[5] || (_cache[5] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectNext()); }, ["exact","stop","prevent"]), ["down"])),
          _cache[6] || (_cache[6] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectFirst()); }, ["stop","prevent"]), ["home"])),
          _cache[7] || (_cache[7] = vue.withKeys(vue.withModifiers(function ($event) { return ($options.selectLast()); }, ["stop","prevent"]), ["end"]))
        ],
        disabled: _ctx.isDisabled
      }, [
        vue.renderSlot(_ctx.$slots, "opener", {
          opener: { value: $props.value, text: $options.openerTxt, opt: $options.curOpt }
        }, function () { return [
          vue.createVNode("span", {
            class: "vue-picker__opener-txt",
            innerHTML: $options.openerHtml
          }, null, 8 /* PROPS */, ["innerHTML"])
        ]; }),
        vue.renderSlot(_ctx.$slots, "openerIco", {}, function () { return [
          _hoisted_1
        ]; })
      ], 40 /* PROPS, HYDRATE_EVENTS */, ["disabled"]),
      vue.withDirectives(vue.createVNode("div", _hoisted_2, [
        vue.renderSlot(_ctx.$slots, "dropdownInner", {}, function () { return [
          vue.renderSlot(_ctx.$slots, "default")
        ]; })
      ], 512 /* NEED_PATCH */), [
        [vue.vShow, _ctx.isDropdownShown]
      ])
    ], 2 /* CLASS */))
  }

  script$1.render = render$1;
  script$1.__file = "src/components/VuePicker.vue";

  var attrsMixin = attrs('disabled');

  var script = {
    name: 'VuePickerOption',

    mixins: [attrsMixin],

    props: {
      value: { type: String, default: '' },
      text: { type: String, default: '' },
    },

    data: function data () {
      return { isSelected: false }
    },

    inject: { picker: 'pickerContext' },

    computed: {
      optHtml: function optHtml () { return this.text || this.$el.innerHTML || this.value },
      optTxt: function optTxt () { return this.text || this.$el.innerText || this.value },
    },

    created: function created () {
      this.picker.regOpt(this);
    },

    methods: {
      selectMyValue: function selectMyValue () {
        this.picker.selectByValue(this.value);
        this.picker.hideDropdown();
      },
    },
  };

  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (vue.openBlock(), vue.createBlock("button", {
      class: ["vue-picker-option", { 'vue-picker-option--cur': $data.isSelected }],
      type: "button",
      onClick: _cache[1] || (_cache[1] = function ($event) { return ($options.selectMyValue()); }),
      disabled: _ctx.isDisabled
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 10 /* CLASS, PROPS */, ["disabled"]))
  }

  script.render = render;
  script.__file = "src/components/VuePickerOption.vue";

  function install (Vue) {
    if (install.installed) { return }
    install.installed = true;
    Vue.component('VuePicker', script$1);
    Vue.component('VuePickerOption', script);
  }

  if (typeof window !== 'undefined') {
    window.VuePicker = install;
  } else if (typeof global !== 'undefined') {
    window.VuePicker = install;
  }

  exports.VuePicker = script$1;
  exports.VuePickerOption = script;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}, Vue));

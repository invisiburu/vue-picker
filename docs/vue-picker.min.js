var VuePicker = (function (exports) {
  'use strict';

  function onOuterClick (el, cb) {
    var handler = function (e) {
      if (!el.contains(e.target)) { cb(); }
    };

    document.addEventListener('click', handler, false);
    return function () { return document.removeEventListener('click', handler, false); }
  }

  var dropdownControls = {
    data: function data () {
      return {
        isDropdownShown: false,
        unlistenOuterClick: function () { },
        onDdShowSubs: [],
        onDdHideSubs: [],
        unsubs: [],
      }
    },

    beforeDestroy: function beforeDestroy () {
      this.unlistenOuterClick();
      this.unsubs.forEach(function (unsub) { return unsub(); });
    },

    methods: {
      toggleDropdown: function toggleDropdown () {
        if (this.isDropdownShown) {
          this.hideDropdown();
        } else {
          this.showDropdown();
        }
      },

      showDropdown: function showDropdown () {
        this.listenOuterClick();
        this.isDropdownShown = true;
        this.onDdShowSubs.forEach(function (cb) { return cb(); });
      },

      hideDropdown: function hideDropdown (isOuterClick) {
        if ( isOuterClick === void 0 ) isOuterClick = false;

        this.unlistenOuterClick();
        this.isDropdownShown = false;
        this.onDdHideSubs.forEach(function (cb) { return cb(isOuterClick); });
      },

      hideDropdownOuter: function hideDropdownOuter() {
        this.hideDropdown(true);
      },

      listenOuterClick: function listenOuterClick () {
        this.unlistenOuterClick = onOuterClick(this.$el, this.hideDropdownOuter);
      },

      onDropdownShow: function onDropdownShow (cb) {
        var this$1 = this;

        this.onDdShowSubs.push(cb);
        this.unsubs.push(function () {
          this$1.onDdShowSubs = this$1.onDdShowSubs.filter(function (el) { return el !== cb; });
        });
      },

      onDropdownHide: function onDropdownHide (cb) {
        var this$1 = this;

        this.onDdHideSubs.push(cb);
        this.unsubs.push(function () {
          this$1.onDdHideSubs = this$1.onDdHideSubs.filter(function (el) { return el !== cb; });
        });
      },
    },
  };

  var keyControls = {
    data: function data () {
      return {
        ddKeySubs: [],
      }
    },

    created: function created () {
      this.onDropdownShow(this.listenKeys);
      this.onDropdownHide(this.unlistenKeys);
    },

    beforeDestroy: function beforeDestroy () {
      this.unlistenKeys();
    },

    methods: {
      listenKeys: function listenKeys () {
        document.addEventListener('keydown', this.listenKeyDown);
      },

      unlistenKeys: function unlistenKeys () {
        document.removeEventListener('keydown', this.listenKeyDown);
      },

      listenKeyDown: function listenKeyDown (event) {
        switch (event.key) {
          case 'Esc':
          case 'Escape':
          case 'Tab':
          case 'Enter':
            event.preventDefault();
            event.stopPropagation();
            return this.hideDropdown()

          case 'Up':
          case 'ArrowUp':
            event.preventDefault();
            event.stopPropagation();
            if (event.altKey)
              { return this.toggleDropdown() }
            return this.selectPrev()

          case 'Down':
          case 'ArrowDown':
            event.preventDefault();
            event.stopPropagation();
            if (event.altKey)
              { return this.toggleDropdown() }
            return this.selectNext()

          case 'Home':
            event.preventDefault();
            event.stopPropagation();
            return this.selectFirst()

          case 'End':
            event.preventDefault();
            event.stopPropagation();
            return this.selectLast()
        }
      },
    },
  };

  var upperFirst = function (str) { return str.replace(/^./, function (v) { return v.toUpperCase(); }); };

  function attrs () {
    var attrs = [], len = arguments.length;
    while ( len-- ) attrs[ len ] = arguments[ len ];

    var props = {};
    var computed = {};

    attrs.forEach(function (name) {
      props[name] = { type: [String, Boolean], default: false };
      computed[("is" + (upperFirst(name)))] = function () {
        var val = this[name];
        var re = new RegExp(("^(true|" + name + ")?$"), 'i');
        return typeof val === 'string' ? re.test(val.trim()) : val
      };
    });

    return {
      props: props,
      computed: computed,
    }
  }

  //

  var attrsMixin = attrs('disabled', 'autofocus');

  var script = {
    name: 'VuePicker',

    mixins: [attrsMixin, dropdownControls, keyControls],

    props: {
      value: { type: String, default: '' },
      placeholder: { type: String, default: '' },
    },

    provide: function provide () {
      return { 'pickerContext': this }
    },

    data: function data () {
      return {
        curOptIdx: -1,
        opts: [],
      }
    },

    computed: {
      curOpt: function curOpt () { return this.opts[this.curOptIdx] },
      curOptVal: function curOptVal () { return (this.curOpt || {}).value },
      ph: function ph () { return !this.value && this.placeholder },
      openerTxt: function openerTxt () { return this.ph || (this.curOpt || {}).optTxt },
      openerHtml: function openerHtml () { return this.ph || (this.curOpt || {}).optHtml },
    },

    watch: {
      value: function value (nV, oV) { (nV !== oV) && this.selectByValue(this.value); },
    },

    mounted: function mounted () {
      var this$1 = this;

      this.onDropdownShow(function () {
        if (this$1.curOpt) { this$1.$nextTick(function () { return this$1.curOpt.$el.focus(); }); }
        else { this$1.$refs.opener.blur(); }
        this$1.$emit('open');
      });

      this.onDropdownHide(function (isOuterClick) {
        if (!isOuterClick) { this$1.$refs.opener.focus(); }
        this$1.emitCurOptVal();
        this$1.$emit('close', isOuterClick);
      });

      if (this.isAutofocus) { this.$refs.opener.focus(); }
      if (this.value) { this.selectByValue(this.value); }
    },

    methods: {
      selectByIdx: function selectByIdx (idx) {
        if (this.curOpt) { this.curOpt.isSelected = false; }

        this.curOptIdx = idx;

        if (this.curOpt) {
          this.curOpt.$el.focus();
          this.curOpt.isSelected = true;
        }

        if (this.isDropdownShown) { return }
        this.emitCurOptVal(this.curOpt ? this.curOpt.value : this.value);
      },

      selectByValue: function selectByValue (value) {
        if ( value === void 0 ) value = '';

        var idx = this.opts.findIndex(function (el) { return el.value === value; });
        if (this.curOptIdx === idx) { return }

        var opt = this.opts[idx];
        if (!opt) { return this.selectByIdx(-1) }
        this.selectByIdx(idx);
      },

      selectNext: function selectNext (offset, startIdx) {
        if ( offset === void 0 ) offset = 1;
        if ( startIdx === void 0 ) startIdx = this.curOptIdx;

        var nextIdx = startIdx + offset;
        var nextOpt = this.opts[nextIdx];
        if (!nextOpt) { return }
        if (nextOpt.isDisabled) { return this.selectNext(offset, nextIdx) }
        this.selectByIdx(nextIdx);
      },

      selectPrev: function selectPrev () {
        if (this.curOptIdx < 0) { return this.selectLast() }
        this.selectNext(-1);
      },

      selectFirst: function selectFirst () {
        this.selectNext(1, -1);
      },

      selectLast: function selectLast () {
        this.selectNext(-1, this.opts.length);
      },

      emitCurOptVal: function emitCurOptVal (val) {
        if ( val === void 0 ) val = this.curOptVal;

        if (typeof val !== 'string') { return }
        this.$emit('input', val);
      },

      regOpt: function regOpt (opt) {
        this.opts.push(opt);
      },
    },
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
      if (typeof shadowMode !== 'boolean') {
          createInjectorSSR = createInjector;
          createInjector = shadowMode;
          shadowMode = false;
      }
      // Vue.extend constructor export interop.
      var options = typeof script === 'function' ? script.options : script;
      // render functions
      if (template && template.render) {
          options.render = template.render;
          options.staticRenderFns = template.staticRenderFns;
          options._compiled = true;
          // functional template
          if (isFunctionalTemplate) {
              options.functional = true;
          }
      }
      // scopedId
      if (scopeId) {
          options._scopeId = scopeId;
      }
      var hook;
      if (moduleIdentifier) {
          // server build
          hook = function (context) {
              // 2.3 injection
              context =
                  context || // cached call
                      (this.$vnode && this.$vnode.ssrContext) || // stateful
                      (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
              // 2.2 with runInNewContext: true
              if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                  context = __VUE_SSR_CONTEXT__;
              }
              // inject component styles
              if (style) {
                  style.call(this, createInjectorSSR(context));
              }
              // register component module identifier for async chunk inference
              if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
              }
          };
          // used by ssr in case component is cached and beforeCreate
          // never gets called
          options._ssrRegister = hook;
      }
      else if (style) {
          hook = shadowMode
              ? function (context) {
                  style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
              }
              : function (context) {
                  style.call(this, createInjector(context));
              };
      }
      if (hook) {
          if (options.functional) {
              // register for functional component in vue file
              var originalRender = options.render;
              options.render = function renderWithStyleInjection(h, context) {
                  hook.call(context);
                  return originalRender(h, context);
              };
          }
          else {
              // inject component registration as beforeCreate hook
              var existing = options.beforeCreate;
              options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
      }
      return script;
  }

  /* script */
  var __vue_script__ = script;
  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "vue-picker",
        class: {
          "vue-picker--open": _vm.isDropdownShown,
          "vue-picker--disabled": _vm.isDisabled,
          "vue-picker--has-val": _vm.curOptVal
        }
      },
      [
        _c(
          "button",
          {
            ref: "opener",
            staticClass: "vue-picker__opener",
            attrs: { type: "button", disabled: _vm.isDisabled },
            on: {
              click: function($event) {
                return _vm.toggleDropdown()
              },
              keydown: [
                function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k($event.keyCode, "up", 38, $event.key, [
                      "Up",
                      "ArrowUp"
                    ])
                  ) {
                    return null
                  }
                  if (!$event.altKey) {
                    return null
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  return _vm.toggleDropdown()
                },
                function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k($event.keyCode, "up", 38, $event.key, [
                      "Up",
                      "ArrowUp"
                    ])
                  ) {
                    return null
                  }
                  if (
                    $event.ctrlKey ||
                    $event.shiftKey ||
                    $event.altKey ||
                    $event.metaKey
                  ) {
                    return null
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  return _vm.selectPrev()
                },
                function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k($event.keyCode, "down", 40, $event.key, [
                      "Down",
                      "ArrowDown"
                    ])
                  ) {
                    return null
                  }
                  if (!$event.altKey) {
                    return null
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  return _vm.toggleDropdown()
                },
                function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k($event.keyCode, "down", 40, $event.key, [
                      "Down",
                      "ArrowDown"
                    ])
                  ) {
                    return null
                  }
                  if (
                    $event.ctrlKey ||
                    $event.shiftKey ||
                    $event.altKey ||
                    $event.metaKey
                  ) {
                    return null
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  return _vm.selectNext()
                },
                function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k(
                      $event.keyCode,
                      "home",
                      undefined,
                      $event.key,
                      undefined
                    )
                  ) {
                    return null
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  return _vm.selectFirst()
                },
                function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k(
                      $event.keyCode,
                      "end",
                      undefined,
                      $event.key,
                      undefined
                    )
                  ) {
                    return null
                  }
                  $event.stopPropagation();
                  $event.preventDefault();
                  return _vm.selectLast()
                }
              ]
            }
          },
          [
            _vm._t(
              "opener",
              [
                _c("span", {
                  staticClass: "vue-picker__opener-txt",
                  domProps: { innerHTML: _vm._s(_vm.openerHtml) }
                })
              ],
              {
                opener: { value: _vm.value, text: _vm.openerTxt, opt: _vm.curOpt }
              }
            ),
            _vm._v(" "),
            _vm._t("openerIco", [
              _c("i", { staticClass: "vue-picker__opener-ico" })
            ])
          ],
          2
        ),
        _vm._v(" "),
        _c(
          "div",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.isDropdownShown,
                expression: "isDropdownShown"
              }
            ],
            staticClass: "vue-picker__dropdown"
          },
          [_vm._t("dropdownInner", [_vm._t("default")])],
          2
        )
      ]
    )
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = undefined;
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    var __vue_component__ = /*#__PURE__*/normalizeComponent(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      false,
      undefined,
      undefined,
      undefined
    );

  //

  var attrsMixin$1 = attrs('disabled');

  var script$1 = {
    name: 'VuePickerOption',

    mixins: [attrsMixin$1],

    props: {
      value: { type: String, default: '' },
      text: { type: String, default: '' },
    },

    data: function data () {
      return { isSelected: false }
    },

    inject: { picker: 'pickerContext' },

    computed: {
      optHtml: function optHtml () { return this.text || this.$el.innerHTML || this.value },
      optTxt: function optTxt () { return this.text || this.$el.innerText || this.value },
    },

    created: function created () {
      this.picker.regOpt(this);
    },

    methods: {
      selectMyValue: function selectMyValue () {
        this.picker.selectByValue(this.value);
        this.picker.hideDropdown();
      },
    },
  };

  /* script */
  var __vue_script__$1 = script$1;
  /* template */
  var __vue_render__$1 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "button",
      {
        staticClass: "vue-picker-option",
        class: { "vue-picker-option--cur": _vm.isSelected },
        attrs: { type: "button", disabled: _vm.isDisabled },
        on: {
          click: function($event) {
            return _vm.selectMyValue()
          }
        }
      },
      [_vm._t("default")],
      2
    )
  };
  var __vue_staticRenderFns__$1 = [];
  __vue_render__$1._withStripped = true;

    /* style */
    var __vue_inject_styles__$1 = undefined;
    /* scoped */
    var __vue_scope_id__$1 = undefined;
    /* module identifier */
    var __vue_module_identifier__$1 = undefined;
    /* functional template */
    var __vue_is_functional_template__$1 = false;
    /* style inject */
    
    /* style inject SSR */
    
    /* style inject shadow dom */
    

    
    var __vue_component__$1 = /*#__PURE__*/normalizeComponent(
      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
      __vue_inject_styles__$1,
      __vue_script__$1,
      __vue_scope_id__$1,
      __vue_is_functional_template__$1,
      __vue_module_identifier__$1,
      false,
      undefined,
      undefined,
      undefined
    );

  function install (Vue) {
    if (install.installed) { return }
    install.installed = true;
    Vue.component('VuePicker', __vue_component__);
    Vue.component('VuePickerOption', __vue_component__$1);
  }

  if (typeof window !== 'undefined') {
    window.VuePicker = install;
  } else if (typeof global !== 'undefined') {
    window.VuePicker = install;
  }

  exports.VuePicker = __vue_component__;
  exports.VuePickerOption = __vue_component__$1;
  exports.install = install;

  return exports;

}({}));
